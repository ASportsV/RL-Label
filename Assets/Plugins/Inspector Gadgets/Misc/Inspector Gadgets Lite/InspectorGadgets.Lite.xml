<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InspectorGadgets.Lite</name>
    </assembly>
    <members>
        <member name="T:InspectorGadgets.Attributes.BaseInspectableAttribute">
            <summary>[Pro-Only]
            <see cref="T:InspectorGadgets.Editor.Editor`1"/> uses these attributes to add extra elements to the inspector.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.BaseInspectableAttribute.Label">
            <summary>The label to use as a prefix before the value. If not set, it will use the name of the attributed member.</summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.BaseInspectableAttribute.Tooltip">
            <summary>The tooltip to use as for the label. If not set, it will use the full name of the attributed member.</summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.BaseInspectableAttribute.LabelContent">
            <summary>
            The <see cref="T:UnityEngine.GUIContent"/> used for this inspectable's label, creates from the <see cref="P:InspectorGadgets.Attributes.BaseInspectableAttribute.Label"/> and
            <see cref="P:InspectorGadgets.Attributes.BaseInspectableAttribute.Tooltip"/>.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.BaseInspectableAttribute.DisplayIndex">
            <summary>
            If set, this inspectable will be drawn at the specified index amongst the regular serialized fields instead
            of after them.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.BaseInspectableAttribute.When">
            <summary>Determines when this attribute should be active.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.BaseInspectableAttribute.CompareTo(InspectorGadgets.Attributes.BaseInspectableAttribute)">
            <summary>Compares the <see cref="P:InspectorGadgets.Attributes.BaseInspectableAttribute.DisplayIndex"/> of this inspectable to the specified `other`.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.ButtonAttribute">
            <summary>[Pro-Only]
            <see cref="T:InspectorGadgets.Editor.Editor`1"/> uses this attribute to add a button at the bottom of the default inspector to
            run the marked method.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.ButtonAttribute.SetDirty">
            <summary>
            If true, clicking the button will automatically call <see cref="M:UnityEditor.EditorUtility.SetDirty(UnityEngine.Object)"/> after
            invoking the method.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.InspectableAttribute">
            <summary>[Pro-Only]
            Adds the attributed field or property to the inspector as if it were serialized.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.InspectableAttribute.Readonly">
            <summary>If true, the displayed field will be greyed out so the user can't modify it.</summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.InspectableAttribute.ConstantlyRepaint">
            <summary>If true, the inspector will be constantly repainted while this label is shown to keep it updated.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.LabelAttribute">
            <summary>[Pro-Only]
            <see cref="T:InspectorGadgets.Editor.Editor`1"/> uses this attribute to add a label at the bottom of the default inspector to
            display the value of the marked property.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.LabelAttribute.HideWhenNull">
            <summary>If true, the label will be hidden when the value is null.</summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.LabelAttribute.ConstantlyRepaint">
            <summary>If true, the inspector will be constantly repainted while this label is shown to keep it updated.</summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.LabelAttribute.LargeMode">
            <summary>
            If true, the label or attributed member name will be drawn on one line with the actual value drawn below it
            and able to take as many lines as you want.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.ColorAttribute">
            <summary>[Pro-Only]
            Causes the attributed field to be drawn in a specific color.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.ColorAttribute.Color">
            <summary>The color to use.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ColorAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>Initializes the <see cref="F:InspectorGadgets.Attributes.ColorAttribute.Color"/> with the specified red, green, and blue values.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ColorAttribute.#ctor(System.String)">
            <summary>
            Initializes the color using the property with the specified `colorName`. You can specify a full name in the
            form "TypeName.StaticProperty" or "TypeName.StaticField", or you can just specify the name of a property in
            the <see cref="T:UnityEngine.Color"/> class such as "red".
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.EulerAttribute">
            <summary>[Pro-Only]
            Causes the attributed <see cref="T:UnityEngine.Quaternion"/> field to be drawn as Euler Angles.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.LabelledCollectionAttribute">
            <summary>[Pro-Only]
            Provides labels for the elements of a collection field to use instead of just calling them "Element X".
            </summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.LabelledCollectionAttribute.GetLabel(System.Int32)">
            <summary>Get the label to use for the element at the specified `index` in the collection.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.LabelledCollectionAttribute.#ctor(System.String[])">
            <summary>Uses the specified `labels` for the collection elements.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.LabelledCollectionAttribute.#ctor(System.Type)">
            <summary>Uses the value names of the specified `enumType` for the collection elements.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.LabelledCollectionAttribute.#ctor(System.String)">
            <summary>
            Uses the member with the specified name to determine the labels of the collection elements.
            <para></para>
            If the member is a collection field, the values in that collection will be used as the element labels.
            <para></para>
            If the member is a method with a single int parameter and a non-void return type, it will be called with
            each element index to determine the label.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.LayerAttribute">
            <summary>Displays the attributed <see cref="T:System.Int32"/> field as a layer.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.LayerAttribute.Drawer">
            <summary>[Editor-Only] Draws <see cref="T:InspectorGadgets.Attributes.LayerAttribute"/> fields.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.LayerAttribute.Drawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <inheritdoc/>
        </member>
        <member name="T:InspectorGadgets.Attributes.ReadonlyAttribute">
            <summary>[Pro-Only]
            Causes the attributed field to be greyed out and un-editable in the inspector.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.ReadonlyAttribute.When">
            <summary>Indicates when the field should be greyed out.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ReadonlyAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:InspectorGadgets.Attributes.ReadonlyAttribute"/> to apply its effects in the default <see cref="T:InspectorGadgets.EditorState"/>
            (set in the <c>Edit/Preferences</c> menu.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ReadonlyAttribute.#ctor(InspectorGadgets.EditorState)">
            <summary>
            Creates a new <see cref="T:InspectorGadgets.Attributes.ReadonlyAttribute"/> to apply its effects in the specified <see cref="T:InspectorGadgets.EditorState"/>.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.RequiredAttribute">
            <summary>[Pro-Only]
            When the attributed member is drawn in the inspector, it will be highlighted in red when it has the default value.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.SceneAttribute">
            <summary>[Pro-Only]
            Causes the attributed int or string field to be drawn as a dropdown box for selecting scenes from the build settings.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.ShowPreviewAttribute">
            <summary>[Pro-Only]
            Causes the attributed <see cref="T:UnityEngine.Object"/> reference field to draw a preview of the target object.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.ShowPreviewAttribute.MaxHeight">
            <summary>The maximum height (in pixels) at which to draw the preview.</summary>
            <remarks>Width will be determined using the aspect ratio of the preview.</remarks>
        </member>
        <member name="M:InspectorGadgets.Attributes.ShowPreviewAttribute.#ctor(System.Int32)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.ShowPreviewAttribute"/> with the specified size.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.ToolbarAttribute">
            <summary>[Pro-Only]
            Causes a bool, string, or enum field to be drawn in the inspector as a series of toggle buttons rather than the
            usual dropdown list or text field.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Attributes.ToolbarAttribute.Label">
            <summary>If set, this string will replace the field's default label.</summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.ToolbarAttribute.Labels">
            <summary>The labels for each button in the toolbar. Enums will use their own names.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ToolbarAttribute.#ctor">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.ToolbarAttribute"/>.</summary>
            <remarks>You must specify the <see cref="F:InspectorGadgets.Attributes.ToolbarAttribute.Labels"/> unless the attributed field is an enum.</remarks>
        </member>
        <member name="M:InspectorGadgets.Attributes.ToolbarAttribute.#ctor(System.String[])">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.ToolbarAttribute"/> using the specified labels (not required for enums).</summary>
            <remarks>For bool fields, the first label is used for false and the second for true.</remarks>
        </member>
        <member name="T:InspectorGadgets.Attributes.UniqueCollectionAttribute">
            <summary>[Pro-Only]
            Shows a warning for any elements of the attributed collection which aren't unique.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.ClampValueAttribute">
            <summary>[Pro-Only]
            Specifies the range of values allowed by the attributed int or float field.
            See also: <see cref="T:InspectorGadgets.Attributes.MinValueAttribute"/> and <see cref="T:InspectorGadgets.Attributes.MaxValueAttribute"/>.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.ClampValueAttribute.MinLong">
            <summary>The minimum allowed integer value.</summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.ClampValueAttribute.MinDouble">
            <summary>The minimum allowed floating point value.</summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.ClampValueAttribute.MaxLong">
            <summary>The maximum allowed integer value.</summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.ClampValueAttribute.MaxDouble">
            <summary>The maximum allowed floating point value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ClampValueAttribute.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.ClampValueAttribute"/> with the specified range.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ClampValueAttribute.#ctor(System.Int64,System.Int64)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.ClampValueAttribute"/> with the specified range.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ClampValueAttribute.#ctor(System.Single,System.Single)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.ClampValueAttribute"/> with the specified range.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.ClampValueAttribute.#ctor(System.Double,System.Double)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.ClampValueAttribute"/> with the specified range.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.HasComponentAttribute">
            <summary>[Pro-Only]
            When applied to a <see cref="T:UnityEngine.GameObject"/> field, any object assigned to that field must have a component of
            the specified type.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.HasComponentAttribute.ComponentTypes">
            <summary>The types of components that are required.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.HasComponentAttribute.#ctor(System.Type[])">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.HasComponentAttribute"/> to require a component of the specified type.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.MaxValueAttribute">
            <summary>[Pro-Only]
            Specifies the maximum value allowed by the attributed int or float field.
            See also: <see cref="T:InspectorGadgets.Attributes.MinValueAttribute"/> and <see cref="T:InspectorGadgets.Attributes.ClampValueAttribute"/>.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.MaxValueAttribute.MaxLong">
            <summary>The maximum allowed integer value.</summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.MaxValueAttribute.MaxDouble">
            <summary>The maximum allowed floating point value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MaxValueAttribute.#ctor(System.Int32)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MaxValueAttribute"/> with the specified maximum value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MaxValueAttribute.#ctor(System.Int64)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MaxValueAttribute"/> with the specified maximum value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MaxValueAttribute.#ctor(System.Single)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MaxValueAttribute"/> with the specified maximum value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MaxValueAttribute.#ctor(System.Double)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MaxValueAttribute"/> with the specified maximum value.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.MinValueAttribute">
            <summary>[Pro-Only]
            Specifies the minimum value allowed by the attributed int or float field.
            See also: <see cref="T:InspectorGadgets.Attributes.MaxValueAttribute"/> and <see cref="T:InspectorGadgets.Attributes.ClampValueAttribute"/>.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.MinValueAttribute.MinLong">
            <summary>The minimum allowed integer value.</summary>
        </member>
        <member name="F:InspectorGadgets.Attributes.MinValueAttribute.MinDouble">
            <summary>The minimum allowed floating point value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MinValueAttribute.#ctor(System.Int32)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MinValueAttribute"/> with the specified minimum value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MinValueAttribute.#ctor(System.Int64)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MinValueAttribute"/> with the specified minimum value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MinValueAttribute.#ctor(System.Single)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MinValueAttribute"/> with the specified minimum value.</summary>
        </member>
        <member name="M:InspectorGadgets.Attributes.MinValueAttribute.#ctor(System.Double)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Attributes.MinValueAttribute"/> with the specified minimum value.</summary>
        </member>
        <member name="T:InspectorGadgets.Attributes.ValidatorAttribute">
            <summary>[Pro-Only]
            Base class for attributes that apply some sort of validation to a field.
            </summary>
        </member>
        <member name="T:InspectorGadgets.IComment">
            <summary>Common interface for objects that are displayed by the <see cref="T:InspectorGadgets.Editor.CommentEditor"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.IComment.Text">
            <summary>The text of this comment.</summary>
        </member>
        <member name="P:InspectorGadgets.IComment.TextFieldName">
            <summary>[Editor-Only] The name of the serialized backing field of the <see cref="P:InspectorGadgets.IComment.Text"/> property.</summary>
        </member>
        <member name="P:InspectorGadgets.IComment.IncludeInBuild">
            <summary>False if this script is set to <see cref="F:UnityEngine.HideFlags.DontSaveInBuild"/>.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.CommentEditor">
            <summary>[Editor-Only] Custom Inspector for <see cref="T:InspectorGadgets.IComment"/>s.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.CommentEditor.OnInspectorGUI">
            <inheritdoc/>
        </member>
        <member name="T:InspectorGadgets.Editor.Editor`1">
            <summary>[Pro-Only] [Editor-Only]
            Base class to derive custom editors from, with a bunch of additional features on top of Unity's base
            <see cref="T:UnityEditor.Editor"/> class.
            </summary>
            <remarks>
            Doesn't draw the target's "Script" field to save inspector space and reduce clutter.
            <para></para>
            You can Middle Click anywhere in the inspector area to open the script in your script editor or Ctrl + Middle
            Click to open its editor script (or create one if none exists already).
            <para></para>
            Provides type-casted versions of <see cref="P:UnityEditor.Editor.target"/> and <see cref="P:UnityEditor.Editor.targets"/> so you don't
            always have to do it yourself (<see cref="P:InspectorGadgets.Editor.Editor`1.Target"/> and <see cref="P:InspectorGadgets.Editor.Editor`1.Targets"/> respectively).
            </remarks>
        </member>
        <member name="P:InspectorGadgets.Editor.Editor`1.Target">
            <summary>The object being inspected (<see cref="P:UnityEditor.Editor.target"/> casted to T).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Editor`1.Targets">
            <summary>An array of all the objects being inspected (<see cref="P:UnityEditor.Editor.targets"/> casted to T).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Editor`1.Current">
            <summary>The editor currently being drawn.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Editor`1.CurrentTarget">
            <summary>
            The object being inspected (<see cref="P:UnityEditor.Editor.target"/> casted to T) by the editor currently
            being drawn.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Editor`1.CurrentTargets">
            <summary>
            An array of all the objects being inspected (<see cref="P:UnityEditor.Editor.targets"/> casted to T) by the
            editor currently being drawn.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Editor`1.OnInspectorGUI">
            <summary>
            Draws the target's regular inspector followed by any extra inspectables
            (<see cref="T:InspectorGadgets.Attributes.ButtonAttribute"/> and <see cref="T:InspectorGadgets.Attributes.LabelAttribute"/>), and responds to Middle
            Click events.
            <para></para>
            To modify or replace just the regular inspector and keep the extra features of <see cref="T:InspectorGadgets.Editor.Editor`1"/>,
            override <see cref="M:InspectorGadgets.Editor.Editor`1.DoPropertiesAndInspectables"/> instead of <see cref="M:InspectorGadgets.Editor.Editor`1.OnInspectorGUI"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Editor`1.DoInspectorGUI">
            <summary>Draws the inspector GUI of the <see cref="P:InspectorGadgets.Editor.Editor`1.Current"/> editor.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Editor`1.DoPropertiesAndInspectables">
            <summary>Draws all of the target's serialized properties and inspectables.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Editor`1.OnPropertyModified">
            <summary>
            This method is called if any of the target's serialized members are modified during
            <see cref="M:InspectorGadgets.Editor.Editor`1.DoInspectorGUI"/>.
            </summary>
            <remarks>This method does nothing unless overridden.</remarks>
        </member>
        <member name="M:InspectorGadgets.Editor.Editor`1.CheckMiddleClick(UnityEngine.Rect)">
            <summary>
            Checks if the current event is a Middle Click to open the script in the user's script editor application,
            or Ctrl + Middle Click to open or create its custom inspector script.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Editor`1.DoAllInspectables">
            <summary>[Pro-Only] Draw all <see cref="T:InspectorGadgets.Attributes.InspectableAttribute"/> members.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Editor`1.RecordTargetUndo(System.String)">
            <summary>
            Records the current state of the <see cref="P:InspectorGadgets.Editor.Editor`1.Targets"/> so that any subsequent changes can be undone
            (reverted back to the recorded state).
            </summary>
        </member>
        <member name="T:InspectorGadgets.Editor.MissingScriptEditor">
            <summary>[Editor-Only]
            A custom Inspector for <see cref="T:UnityEngine.MonoBehaviour"/> but not its children, so it should only ever get used on
            missing scripts.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.MissingScriptEditor.ScriptProperty">
            <summary>The target's "m_Script" property.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.MissingScriptEditor.OtherProperties">
            <summary>All of the target's properties other than "m_Script".</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.MissingScriptEditor.OnEnable">
            <summary>
            Gathers the target's properties. If its script is missing, this method tries to find other similar scripts.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.MissingScriptEditor.OnInspectorGUI">
            <summary>
            Draws the target's inspector with a message indicating that the script is missing.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.MissingScriptEditor.OnDisable">
            <summary>
            Indicates to the <see cref="T:InspectorGadgets.Editor.MissingScriptWindow"/> that the target has been deselected.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.MissingScriptEditor.DestroyProperly(UnityEngine.Object[],System.Boolean)">
            <summary>Destroys the `targets`. Shows a confirmation dialog before destroying assets.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.MissingScriptEditor.DestroyProperly(UnityEngine.Object,System.Boolean)">
            <summary>Destroys the `target`. Shows a confirmation dialog before destroying assets.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.MissingScriptWindow">
            <summary>[Editor-Only]
            A utility for tracking down and fixing missing script references.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.TransformEditor.ShouldDisableSceneTools">
            <summary>
            Returns true in Play Mode if any of the selected objects are marked as static.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Editor.AutoHideUI">
             <summary>[Editor-Only]
             Automatically hides the UI layer inside the Editor so it doesn't get in the way of 3D objects in scene view.
            <para></para>
             When any object is selected that is on the UI layer, the layer will be shown and the camera changed to 2D orthographic and zoomed to the current selection.
            <para></para>
             When any object on another layer is selected, the UI layer will be hidden and the camera changed back to the previous state.
             </summary>
             <remarks>
             The only reason this class inherits from <see cref="T:UnityEngine.ScriptableObject"/> is so that
             <see cref="M:UnityEditor.MonoScript.FromScriptableObject(UnityEngine.ScriptableObject)"/> can be used to find its file path to determine whether it is in
             the process of being deleted.
             </remarks>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.UiLayer">
            <summary>The inbuilt layer named "UI".</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.IsEnabled">
            <summary>Is this system currently operating?</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.IsShowingUI">
            <summary>Is the UI layer currently visible?</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.FocusOnSelection">
            <summary>
            If true, selecting a UI object will focus the scene camera on that object. Otherwise it will focus on the
            root <see cref="T:UnityEngine.Canvas"/> of that object.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.Previous2dMode">
            <summary>Was the scene camera in 2D mode before the UI was focussed?</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.PreviousOrthographicMode">
            <summary>Was the scene camera in Orthographic mode before the UI was focussed?</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.UILayerMask">
            <summary>The bit mask of layers that are considered to contain UI objects.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.PreviousPivot">
            <summary>The pivot point of the scene camera from before the UI was focussed.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.PreviousRotation">
            <summary>The rotation of the scene camera from before the UI was focussed.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.AutoHideUI.PreviousSize">
            <summary>The orthographic size of the scene camera from before the UI was focussed.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.IGEditorUtils">
            <summary>[Editor-Only] Various utility methods used by <see cref="N:InspectorGadgets"/>.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.IGEditorUtils.AnyAccessBindings">
            <summary>Commonly used <see cref="T:System.Reflection.BindingFlags"/>.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.IGEditorUtils.InstanceBindings">
            <summary>Commonly used <see cref="T:System.Reflection.BindingFlags"/>.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.IGEditorUtils.StaticBindings">
            <summary>Commonly used <see cref="T:System.Reflection.BindingFlags"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.AllBackslashes(System.String)">
            <summary>
            Replaces any forward slashes with backslashes: <c>/</c> -> <c>\</c>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.GroupedInvoke(UnityEditor.MenuCommand,System.Action{System.Collections.Generic.List{UnityEngine.Object}})">
            <summary>
            When a context menu function is executed with multiple objects selected, it calls the method once for each
            object. Passing each `command` into this method will group them all into a list and invoke the specified
            `method` once they have all been gathered.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.OpenInspectorGadgetsProInAssetStore">
            <summary>Opens Inspector Gadgets Pro in the Asset Store window.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.MoveSnapX">
            <summary>The Unity editor's "Move X" snap setting (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.MoveSnapY">
            <summary>The Unity editor's "Move Y" snap setting (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.MoveSnapZ">
            <summary>The Unity editor's "Move Z" snap setting (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.MoveSnapVector">
            <summary>(<see cref="P:InspectorGadgets.Editor.IGEditorUtils.MoveSnapX"/>, <see cref="P:InspectorGadgets.Editor.IGEditorUtils.MoveSnapY"/>, <see cref="P:InspectorGadgets.Editor.IGEditorUtils.MoveSnapZ"/>).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.RotationSnap">
            <summary>The Unity editor's "Rotation" snap setting (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.RotationSnapVector">
            <summary>(<see cref="P:InspectorGadgets.Editor.IGEditorUtils.RotationSnap"/>, <see cref="P:InspectorGadgets.Editor.IGEditorUtils.RotationSnap"/>, <see cref="P:InspectorGadgets.Editor.IGEditorUtils.RotationSnap"/>).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.ScaleSnap">
            <summary>The Unity editor's "Scale" snap setting (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.ScaleSnapVector">
            <summary>(<see cref="P:InspectorGadgets.Editor.IGEditorUtils.ScaleSnap"/>, <see cref="P:InspectorGadgets.Editor.IGEditorUtils.ScaleSnap"/>, <see cref="P:InspectorGadgets.Editor.IGEditorUtils.ScaleSnap"/>).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.Snap(System.Single,System.Single)">
            <summary>Snaps the given `value` to a grid with the specified `snap` size.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapPosition(UnityEngine.Vector3)">
            <summary>Snaps the given `position` to the grid (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapPosition(UnityEngine.Vector3,System.Int32)">
            <summary>Snaps the given `position` to the grid on the specified axis (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapRotation(UnityEngine.Vector3)">
            <summary>Snaps the given `rotationEuler` to the nearest snap increment on all axes (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapRotation(UnityEngine.Vector3,System.Int32)">
            <summary>Snaps the given `rotationEuler` to the nearest snap increment on the specified axis (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapRotation(UnityEngine.Quaternion)">
            <summary>Snaps the given `rotation` to the nearest snap increment on all axes (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapRotation(UnityEngine.Quaternion,System.Int32)">
            <summary>Snaps the given `rotation` to the nearest snap increment on the specified axis (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapScale(UnityEngine.Vector3)">
            <summary>Snaps the given `scale` to the nearest snap increment on all axes (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.SnapScale(UnityEngine.Vector3,System.Int32)">
            <summary>Snaps the given `scale` to the nearest snap increment on the specified axis (as specified in Edit/Snap Settings).</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.IsSnapped(System.Single,System.Single)">
            <summary>Returns true if `value` is approximately equal to a multiple of `snap`.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.Spacing">
            <summary><see cref="P:UnityEditor.EditorGUIUtility.standardVerticalSpacing"/>. This value is 2 in Unity 2018.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.DoInspectableGUI(UnityEngine.Object[])">
            <summary>[Pro-Only] 
            Draws the GUI for all <see cref="T:InspectorGadgets.Attributes.BaseInspectableAttribute"/>s of the `targets`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.DrawDelegate(UnityEngine.Rect,System.Delegate)">
            <summary>Draw the target and name of the specified <see cref="T:System.Delegate"/>.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.IGEditorUtils._TempContent">
            <summary>Used by <see cref="M:InspectorGadgets.Editor.IGEditorUtils.TempContent(System.String,System.String)"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.TempContent(System.String,System.String)">
            <summary>
            Creates and returns a <see cref="T:UnityEngine.GUIContent"/> with the specified parameters on the first call and then
            simply returns the same one with new parameters on each subsequent call.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.GetCachedStyle(System.Func{UnityEngine.GUIStyle})">
            <summary>
            Creates a <see cref="T:UnityEngine.GUIStyle"/> using the provided delegate and caches it so the same style can be
            returned when this method is called again for the same delegate.
            </summary>
            <remarks>
            This method allows you to create custom styles without needing to make a new field to store them in.
            </remarks>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.DontExpandWidth">
            <summary>
            A single <see cref="T:UnityEngine.GUILayoutOption"/> created by passing <c>false</c> into <see cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.CalculateWidth(UnityEngine.GUIStyle,UnityEngine.GUIContent)">
            <summary>Calls <see cref="M:UnityEngine.GUIStyle.CalcMinMaxWidth(UnityEngine.GUIContent,System.Single@,System.Single@)"/> and returns the max width.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.CalculateWidth(UnityEngine.GUIStyle,System.String)">
            <summary>Calls <see cref="M:UnityEngine.GUIStyle.CalcMinMaxWidth(UnityEngine.GUIContent,System.Single@,System.Single@)"/> and returns the max width.</summary>
            <remarks>This method uses the <see cref="M:InspectorGadgets.Editor.IGEditorUtils.TempContent(System.String,System.String)"/>.</remarks>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.StealFromLeft(UnityEngine.Rect@,System.Single)">
            <summary>
            Subtracts the `width` from the left side of the `area` and returns a new <see cref="T:UnityEngine.Rect"/> occupying the
            removed section.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.StealFromLeft(UnityEngine.Rect@,System.Single,UnityEngine.RectOffset)">
            <summary>
            Subtracts the `width` from the left side of the `area` and returns a new <see cref="T:UnityEngine.Rect"/> occupying the
            removed section.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.StealFromRight(UnityEngine.Rect@,System.Single)">
            <summary>
            Subtracts the `width` from the right side of the `area` and returns a new <see cref="T:UnityEngine.Rect"/> occupying the
            removed section.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.StealFromRight(UnityEngine.Rect@,System.Single,UnityEngine.RectOffset)">
            <summary>
            Subtracts the `width` from the right side of the `area` and returns a new <see cref="T:UnityEngine.Rect"/> occupying the
            removed section.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.IGEditorUtils.IndentSize">
            <summary>The number of pixels of indentation for each <see cref="P:UnityEditor.EditorGUI.indentLevel"/> increment.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.DoLayerMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
            <summary>
            Make a field for layer masks.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.OnSceneGUI(System.Action,System.Boolean)">
            <summary>Registers the specified method to be called while drawing the <see cref="T:UnityEditor.SceneView"/> GUI.</summary>
            
            <remarks>
            This allows you to use the <see cref="T:UnityEditor.Handles"/> class which isn't available during a
            <see cref="T:UnityEngine.MonoBehaviour"/> <c>OnDrawGizmos</c> message.
            <para></para>
            If the <see cref="P:System.Delegate.Target"/> is an <see cref="T:UnityEngine.Object"/>, the method will be de-registered when that
            object is destroyed.
            <para></para>
            Otherwise it will be de-registered when the delegate itself is garbage collected.
            </remarks>
            
            <example>
            You can prevent the delegate from being garbage collected by storing it as you pass it into this method.
            <para></para><code>
            #if UNITY_EDITOR
                private Action _OnSceneGUI;
            
                public ThisClassName()// Constructor.
                {
                    InspectorGadgets.Editor.IGEditorUtils.OnSceneGUI(_OnSceneGUI = () =>
                    {
                        UnityEditor.Handles.CubeHandleCap(0, default, Quaternion.identity, 1, Event.current.type);
                    });
                }
            #endif
            </code></example>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.OnSceneGUI(System.Action,UnityEngine.Object,System.Boolean)">
            <summary>Registers the specified method to be called while drawing the <see cref="T:UnityEditor.SceneView"/> GUI.</summary>
            <remarks>
            The method will be de-registered when the `target` is destroyed.
            <para></para>
            This method does nothing if the `target` is not a scene object.
            </remarks>
            <example>See <see cref="M:InspectorGadgets.Editor.IGEditorUtils.OnSceneGUI(System.Action,System.Boolean)"/>.</example>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.OnSceneGUI(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>Registers the specified method to be called while drawing the <see cref="T:UnityEditor.SceneView"/> GUI.</summary>
            <remarks>The method will be de-registered when it throws any exception or `keepDrawing` returns false.</remarks>
            <example>See <see cref="M:InspectorGadgets.Editor.IGEditorUtils.OnSceneGUI(System.Action,System.Boolean)"/>.</example>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.GetDefaultFileExtension(System.Type)">
            <summary>Returns the default file extension for a type derived from <see cref="T:UnityEngine.Object"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.ColorToHex(UnityEngine.Color32)">
            <summary>Returns a string containing the hexadecimal representation of `color`.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.AppendColorToHex(System.Text.StringBuilder,UnityEngine.Color32)">
            <summary>Appends the hexadecimal representation of `color`.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.AppendColorTag(System.Text.StringBuilder,UnityEngine.Color32,System.String)">
            <summary>Appends the a rich text color tag around the `message`.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.ForEachProperty(UnityEditor.SerializedObject,System.Boolean,System.Action{UnityEditor.SerializedProperty})">
            <summary>
            Calls the specified `method` for each <see cref="T:UnityEditor.SerializedProperty"/> in the `serializedObject` then
            applies any modified properties.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.FindAssetGuidsOfType(System.Type)">
            <summary>
            Calls <see cref="M:UnityEditor.AssetDatabase.FindAssets(System.String,System.String[])"/> using the specified `type` as the filter.
            <para></para>
            If the `type` inherits from <see cref="T:UnityEngine.Component"/> then it will instead use <see cref="T:UnityEngine.GameObject"/> as
            the filter to find all Prefabs (since Unity won't find <see cref="T:UnityEngine.Component"/> types directly).
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.FindAssetOfType(System.Type,System.String)">
            <summary>
            Searches through all assets of the specified `type` and returns the one with a name closest to the
            `nameHint`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.IGEditorUtils.GetSerializedPropertyContext(UnityEditor.SerializedProperty)">
            <summary>
            Returns a disposable context that will allow copy and paste commands to be executed on the `property`.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Editor.PropertyVisualiserWindow">
            <summary>[Editor-Only]
            Base class for editor windows that help visualise the value of a <see cref="T:UnityEditor.SerializedProperty"/>.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.PropertyVisualiserWindow.Target">
            <summary>A serializable reference to the <see cref="T:UnityEditor.SerializedProperty"/> being visualised.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.PropertyVisualiserWindow.WindowName">
            <summary>The name of the window to use as its title.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.ValidateTarget">
            <summary>Called at the start of <see cref="M:InspectorGadgets.Editor.PropertyVisualiserWindow.OnGUI"/>. If this method returns false, the window will be closed.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.OnSceneGUI(UnityEditor.SceneView)">
            <summary>Override this method to draw gizmos in the scene to visualise the target property.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.OnEnable">
            <summary>
            Called when this window is loaded.
            Sets the window title and registers the <see cref="M:InspectorGadgets.Editor.PropertyVisualiserWindow.DoSceneGUI(UnityEditor.SceneView)"/> callback.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.OnDisable">
            <summary>
            Called when this window is unloaded.
            Unregisters the <see cref="M:InspectorGadgets.Editor.PropertyVisualiserWindow.DoSceneGUI(UnityEditor.SceneView)"/> callback.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.OnGUI">
            <summary>
            Draws this window's GUI by calling <see cref="M:InspectorGadgets.Editor.PropertyVisualiserWindow.DrawOptions"/> then drawing the target property.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.DrawOptions">
            <summary>
            Draws a toggle to control whether the visualisations should be relative to the selected object or not.
            Override this method to add additional options to the window.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.PropertyVisualiserWindow.SelectedTransform">
            <summary>
            If the "Relative to Selection" toggle is enabled, this property returns the selected object's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.AddVisualiseItem``1(UnityEditor.GenericMenu,UnityEditor.SerializedProperty)">
            <summary>Add a "Visualise" menu item which calls <see cref="M:InspectorGadgets.Editor.PropertyVisualiserWindow.Visualise``1(UnityEditor.SerializedProperty)"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.PropertyVisualiserWindow.Visualise``1(UnityEditor.SerializedProperty)">
            <summary>
            Opens a <see cref="T:InspectorGadgets.Editor.PropertyVisualiserWindow"/> of the specified type and assigns the specified `property`
            as its target.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Editor.Vector3VisualiserWindow">
            <summary>[Editor-Only]
            The "Visualise" command in the context menu of a <see cref="T:UnityEngine.Vector3"/> property can be used to open this window
            which visualises the property's value in the scene.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Vector3VisualiserWindow.WindowName">
            <summary>The name of the window to use as its title.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Vector3VisualiserWindow.ValidateTarget">
            <summary>Returns true if the target property is a <see cref="F:UnityEditor.SerializedPropertyType.Vector3"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Vector3VisualiserWindow.OnSceneGUI(UnityEditor.SceneView)">
            <summary>Draws gizmos in the scene to visualise the target property.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.Vector2VisualiserWindow">
            <summary>[Editor-Only]
            The "Visualise" command in the context menu of a <see cref="T:UnityEngine.Vector2"/> property can be used to open this window
            which visualises the property's value in the scene.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Vector2VisualiserWindow.WindowName">
            <summary>The name of the window to use as its title.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Vector2VisualiserWindow.ValidateTarget">
            <summary>Returns true if the target property is a <see cref="F:UnityEditor.SerializedPropertyType.Vector2"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Vector2VisualiserWindow.DrawOptions">
            <summary>Draws the extra options of this <see cref="T:InspectorGadgets.Editor.PropertyVisualiserWindow"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Vector2VisualiserWindow.OnSceneGUI(UnityEditor.SceneView)">
            <summary>Draws gizmos in the scene to visualise the target property.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.FloatVisualiserWindow">
            <summary>[Editor-Only]
            The "Visualise" command in the context menu of a <see cref="T:System.Single"/> property can be used to open this window
            which visualises the property's value in the scene.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.FloatVisualiserWindow.WindowName">
            <summary>The name of the window to use as its title.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.FloatVisualiserWindow.ValidateTarget">
            <summary>Returns true if the target property is a <see cref="F:UnityEditor.SerializedPropertyType.Float"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.FloatVisualiserWindow.OnSceneGUI(UnityEditor.SceneView)">
            <summary>Draws gizmos in the scene to visualise the target property.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.MenuFunctionState">
            <summary>The possible states for a function in a <see cref="T:UnityEditor.GenericMenu"/>.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.MenuFunctionState.Normal">
            <summary>Displayed normally.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.MenuFunctionState.Selected">
            <summary>Has a check mark next to it to show that it is selected.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.MenuFunctionState.Disabled">
            <summary>Greyed out and unusable.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.Serialization">
            <summary>[Editor-Only] Various serialization utilities.</summary>
            <summary>[Editor-Only] Various serialization utilities.</summary>
            <summary>[Editor-Only] Various serialization utilities.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.ArrayDataPrefix">
            <summary>The text used in a <see cref="P:UnityEditor.SerializedProperty.propertyPath"/> to denote array elements.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.ArrayDataSuffix">
            <summary>The text used in a <see cref="P:UnityEditor.SerializedProperty.propertyPath"/> to denote array elements.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.InstanceBindings">
            <summary>Bindings for Public and Non-Public Instance members.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetFriendlyPath(UnityEditor.SerializedProperty)">
            <summary>Returns a user friendly version of the <see cref="P:UnityEditor.SerializedProperty.propertyPath"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetValue(UnityEditor.SerializedProperty,System.Object)">
            <summary>Gets the value of the specified <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetValue(UnityEditor.SerializedProperty)">
            <summary>Gets the value of the <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetValue``1(UnityEditor.SerializedProperty)">
            <summary>Gets the value of the <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetValue``1(UnityEditor.SerializedProperty,``0@)">
            <summary>Gets the value of the <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetValues``1(UnityEditor.SerializedProperty)">
            <summary>Gets the value of the <see cref="T:UnityEditor.SerializedProperty"/> for each of its target objects.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.IsDefaultValueByType(UnityEditor.SerializedProperty)">
            <summary>Is the value of the `property` the same as the default serialized value for its type?</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.SetValue(UnityEditor.SerializedProperty,System.Object,System.Object)">
            <summary>Sets the value of the specified <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.SetValue(UnityEditor.SerializedProperty,System.Object)">
            <summary>Sets the value of the <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ResetValue(UnityEditor.SerializedProperty,System.String)">
            <summary>
            Resets the value of the <see cref="T:UnityEditor.SerializedProperty"/> to the default value of its type and all its field
            types, ignoring values set by constructors or field initializers.
            </summary>
            <remarks>
            If you want to run constructors and field initializers, you can call
            <see cref="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.ResetValue(UnityEditor.SerializedProperty,System.String)"/> instead.
            </remarks>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CopyValueFrom(UnityEditor.SerializedProperty,UnityEditor.SerializedProperty)">
            <summary>Copies the value of `from` into `to` (including all nested properties).</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.GradientValue">
            <summary><c>SerializedProperty.gradientValue</c> is internal.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetGradientValue(UnityEditor.SerializedProperty)">
            <summary>Gets the <see cref="T:UnityEngine.Gradient"/> value from a <see cref="F:UnityEditor.SerializedPropertyType.Gradient"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.SetGradientValue(UnityEditor.SerializedProperty,UnityEngine.Gradient)">
            <summary>Sets the <see cref="T:UnityEngine.Gradient"/> value on a <see cref="F:UnityEditor.SerializedPropertyType.Gradient"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.AreSameProperty(UnityEditor.SerializedProperty,UnityEditor.SerializedProperty)">
            <summary>Indicates whether both properties refer to the same underlying field.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ForEachTarget(UnityEditor.SerializedProperty,System.Action{UnityEditor.SerializedProperty},System.String)">
            <summary>
            Executes the `action` once with a new <see cref="T:UnityEditor.SerializedProperty"/> for each of the
            <see cref="P:UnityEditor.SerializedObject.targetObjects"/>. Or if there is only one target, it uses the `property`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.AddFunction(UnityEditor.GenericMenu,System.String,InspectorGadgets.Editor.MenuFunctionState,UnityEditor.GenericMenu.MenuFunction)">
            <summary>
            Adds a menu item to execute the specified `function` for each of the `property`s target objects.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.AddFunction(UnityEditor.GenericMenu,System.String,System.Boolean,UnityEditor.GenericMenu.MenuFunction)">
            <summary>
            Adds a menu item to execute the specified `function` for each of the `property`s target objects.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.AddPropertyModifierFunction(UnityEditor.GenericMenu,UnityEditor.SerializedProperty,System.String,InspectorGadgets.Editor.MenuFunctionState,System.Action{UnityEditor.SerializedProperty})">
            <summary>Adds a menu item to execute the specified `function` for each of the `property`s target objects.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.AddPropertyModifierFunction(UnityEditor.GenericMenu,UnityEditor.SerializedProperty,System.String,System.Boolean,System.Action{UnityEditor.SerializedProperty})">
            <summary>Adds a menu item to execute the specified `function` for each of the `property`s target objects.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.AddPropertyModifierFunction(UnityEditor.GenericMenu,UnityEditor.SerializedProperty,System.String,System.Action{UnityEditor.SerializedProperty})">
            <summary>Adds a menu item to execute the specified `function` for each of the `property`s target objects.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ModifyValues``1(UnityEditor.SerializedProperty,System.Action{``0},System.String)">
            <summary>
            Calls the specified `method` for each of the underlying values of the `property` (in case it represents
            multiple selected objects) and records an undo step for any modifications made.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.RecordUndo(UnityEditor.SerializedProperty,System.String)">
            <summary>
            Records the state of the specified `property` so it can be undone.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.OnPropertyChanged(UnityEditor.SerializedProperty)">
            <summary>
            Updates the specified `property` and marks its target objects as dirty so any changes to a prefab will be saved.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetPropertyType(System.Type)">
            <summary>
            Returns the <see cref="T:UnityEditor.SerializedPropertyType"/> that represents fields of the specified `type`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.RemoveArrayElement(UnityEditor.SerializedProperty,System.Int32)">
            <summary>Removes the specified array element from the `property`.</summary>
            <remarks>
            If the element is not at its default value, the first call to
            <see cref="M:UnityEditor.SerializedProperty.DeleteArrayElementAtIndex(System.Int32)"/> will only reset it, so this method will
            call it again if necessary to ensure that it actually gets removed.
            </remarks>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetAccessor(UnityEditor.SerializedProperty)">
            <summary>
            Returns an <see cref="T:InspectorGadgets.Editor.Serialization.PropertyAccessor"/> that can be used to access the details of the specified `property`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetAccessor(UnityEditor.SerializedProperty,System.String,System.Type@)">
            <summary>
            Returns an <see cref="T:InspectorGadgets.Editor.Serialization.PropertyAccessor"/> for a <see cref="T:UnityEditor.SerializedProperty"/> with the specified `propertyPath`
            on the specified `type` of object.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetField(InspectorGadgets.Editor.Serialization.PropertyAccessor,UnityEditor.SerializedProperty,System.Type,System.String)">
            <summary>Returns a field with the specified `name` in the `declaringType` or any of its base types.</summary>
            <remarks>Uses the <see cref="F:InspectorGadgets.Editor.Serialization.InstanceBindings"/>.</remarks>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.GetField(System.Type,System.String)">
            <summary>Returns a field with the specified `name` in the `declaringType` or any of its base types.</summary>
            <remarks>Uses the <see cref="F:InspectorGadgets.Editor.Serialization.InstanceBindings"/>.</remarks>
        </member>
        <member name="T:InspectorGadgets.Editor.Serialization.PropertyAccessor">
            <summary>[Editor-Only]
            A wrapper for accessing the underlying values and fields of a <see cref="T:UnityEditor.SerializedProperty"/>.
            </summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent">
            <summary>The accessor for the field which this accessor is nested inside.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Name">
            <summary>The name of the field wrapped by this accessor.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field">
            <summary>The field wrapped by this accessor.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.FieldElementType">
            <summary>
            The type of the wrapped <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/>.
            Or if it's a collection, this is the type of items in the collection.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.#ctor(InspectorGadgets.Editor.Serialization.PropertyAccessor,System.String,System.Reflection.FieldInfo)">
            <summary>[Internal] Creates a new <see cref="T:InspectorGadgets.Editor.Serialization.PropertyAccessor"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.#ctor(InspectorGadgets.Editor.Serialization.PropertyAccessor,System.String,System.Reflection.FieldInfo,System.Type)">
            <summary>Creates a new <see cref="T:InspectorGadgets.Editor.Serialization.PropertyAccessor"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(System.Object@)">
            <summary>Returns the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/> if there is one or tries to get it from the object's type.</summary>
            
            <remarks>
            If this accessor has a <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent"/>, the `obj` must be associated with the root
            <see cref="T:UnityEditor.SerializedProperty"/> and this method will change it to reference the parent field's value.
            </remarks>
            
            <example><code>
            [Serializable]
            public class InnerClass
            {
                public float value;
            }
            
            [Serializable]
            public class RootClass
            {
                public InnerClass inner;
            }
            
            public class MyBehaviour : MonoBehaviour
            {
                public RootClass root;
            }
            
            [UnityEditor.CustomEditor(typeof(MyBehaviour))]
            public class MyEditor : UnityEditor.Editor
            {
                private void OnEnable()
                {
                    var serializedObject = new SerializedObject(target);
                    var rootProperty = serializedObject.FindProperty("root");
                    var innerProperty = rootProperty.FindPropertyRelative("inner");
                    var valueProperty = innerProperty.FindPropertyRelative("value");
            
                    var accessor = valueProperty.GetAccessor();
            
                    object obj = target;
                    var valueField = accessor.GetField(ref obj);
                    // valueField is a FieldInfo referring to InnerClass.value.
                    // obj now holds the ((MyBehaviour)target).root.inner.
                }
            }
            </code></example>
            
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(System.Object)">
            <summary>
            Returns the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/> if there is one, otherwise calls <see cref="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(System.Object@)"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(UnityEditor.SerializedObject)">
            <summary>
            Calls <see cref="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(System.Object)"/> with the <see cref="P:UnityEditor.SerializedObject.targetObject"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(UnityEditor.SerializedProperty)">
            <summary>
            Calls <see cref="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(UnityEditor.SerializedObject)"/> with the
            <see cref="P:UnityEditor.SerializedProperty.serializedObject"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetFieldElementType(System.Object)">
            <summary>
            Returns the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.FieldElementType"/> if there is one, otherwise calls <see cref="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetField(System.Object@)"/>
            and returns its <see cref="P:System.Reflection.FieldInfo.FieldType"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetFieldElementType(UnityEditor.SerializedObject)">
            <summary>
            Calls <see cref="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetFieldElementType(System.Object)"/> with the
            <see cref="P:UnityEditor.SerializedObject.targetObject"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetFieldElementType(UnityEditor.SerializedProperty)">
            <summary>
            Calls <see cref="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetFieldElementType(UnityEditor.SerializedObject)"/> with the
            <see cref="P:UnityEditor.SerializedProperty.serializedObject"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetValue(System.Object)">
            <summary>
            Gets the value of the from the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent"/> (if there is one), then uses it to get and return
            the value of the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetValue(UnityEditor.SerializedObject)">
            <summary>
            Gets the value of the from the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent"/> (if there is one), then uses it to get and return
            the value of the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetValue(UnityEditor.SerializedProperty)">
            <summary>
            Gets the value of the from the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent"/> (if there is one), then uses it to get and return
            the value of the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the from the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent"/> (if there is one), then uses it to set the value
            of the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.SetValue(UnityEditor.SerializedObject,System.Object)">
            <summary>
            Gets the value of the from the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent"/> (if there is one), then uses it to set the value
            of the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.SetValue(UnityEditor.SerializedProperty,System.Object)">
            <summary>
            Gets the value of the from the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Parent"/> (if there is one), then uses it to set the value
            of the <see cref="F:InspectorGadgets.Editor.Serialization.PropertyAccessor.Field"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.ResetValue(UnityEditor.SerializedProperty,System.String)">
            <summary>
            Resets the value of the <see cref="T:UnityEditor.SerializedProperty"/> to the default value of its type by executing
            its constructor and field initializers.
            </summary>
            <remarks>
            If you don't want to run constructors and field initializers, you can call
            <see cref="M:InspectorGadgets.Editor.Serialization.ResetValue(UnityEditor.SerializedProperty,System.String)"/> instead.
            </remarks>
            <example><code>
            SerializedProperty property;
            property.GetAccessor().ResetValue(property);
            </code></example>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.ToString">
            <summary>Returns a description of this accessor's path.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyAccessor.GetPath">
            <summary>Returns a this accessor's <see cref="P:UnityEditor.SerializedProperty.propertyPath"/>.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor">
            <summary>[Editor-Only] A <see cref="T:InspectorGadgets.Editor.Serialization.PropertyAccessor"/> for a specific element index in a collection.</summary>
        </member>
        <member name="F:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.ElementIndex">
            <summary>The index of the array element this accessor targets.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.#ctor(InspectorGadgets.Editor.Serialization.PropertyAccessor,System.String,System.Reflection.FieldInfo,System.Int32)">
            <summary>[Internal] Creates a new <see cref="T:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.GetFieldElementType(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.GetElementType(System.Type)">
            <summary>Returns the type of elements in the array.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.GetCollection(System.Object)">
            <summary>Returns the collection object targeted by this accessor.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.SetCollection(System.Object,System.Object)">
            <summary>Sets the collection object targeted by this accessor.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.ToString">
            <summary>Returns a description of this accessor's path.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.GetCollectionPath">
            <summary>Returns the <see cref="P:UnityEditor.SerializedProperty.propertyPath"/> of the array containing the target.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.CollectionPropertyAccessor.GetPath">
            <summary>Returns this accessor's <see cref="P:UnityEditor.SerializedProperty.propertyPath"/>.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.Serialization.ObjectReference">
            <summary>[Editor-Only]
            Directly serializing an <see cref="T:UnityEngine.Object"/> reference doesn't always work (such as with scene
            objects when entering Play Mode), so this class also serializes their instance ID and uses that if the direct
            reference fails.
            </summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.ObjectReference.Object">
            <summary>The referenced <see cref="T:UnityEditor.SerializedObject"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.ObjectReference.InstanceID">
            <summary>The <see cref="M:UnityEngine.Object.GetInstanceID"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ObjectReference.#ctor(UnityEngine.Object)">
            <summary>
            Creates a new <see cref="T:InspectorGadgets.Editor.Serialization.ObjectReference"/> which wraps the specified
            <see cref="T:UnityEngine.Object"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ObjectReference.op_Implicit(UnityEngine.Object)~InspectorGadgets.Editor.Serialization.ObjectReference">
            <summary>
            Creates a new <see cref="T:InspectorGadgets.Editor.Serialization.ObjectReference"/> which wraps the specified
            <see cref="T:UnityEngine.Object"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ObjectReference.op_Implicit(InspectorGadgets.Editor.Serialization.ObjectReference)~UnityEngine.Object">
            <summary>Returns the target <see cref="P:InspectorGadgets.Editor.Serialization.ObjectReference.Object"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ObjectReference.Convert(UnityEngine.Object[])">
            <summary>Creates a new array of <see cref="T:InspectorGadgets.Editor.Serialization.ObjectReference"/>s representing the `objects`.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ObjectReference.Convert(InspectorGadgets.Editor.Serialization.ObjectReference[])">
            <summary>
            Creates a new array of <see cref="T:UnityEngine.Object"/>s containing the target <see cref="P:InspectorGadgets.Editor.Serialization.ObjectReference.Object"/> of each
            of the `references`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ObjectReference.AreSameObjects(InspectorGadgets.Editor.Serialization.ObjectReference[],UnityEngine.Object[])">
            <summary>Indicates whether both arrays refer to the same set of objects.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.ObjectReference.ToString">
            <summary>Returns a string describing this object.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.IsValid(InspectorGadgets.Editor.Serialization.ObjectReference)">
            <summary>Returns true if the `reference` and <see cref="P:InspectorGadgets.Editor.Serialization.ObjectReference.Object"/> are not null.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.Serialization.PropertyReference">
            <summary>[Editor-Only] A serializable reference to a <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.PropertyReference.TargetObject">
            <summary>[<see cref="T:UnityEngine.SerializeField"/>] The <see cref="P:UnityEditor.SerializedObject.targetObject"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.PropertyReference.TargetObjects">
            <summary>[<see cref="T:UnityEngine.SerializeField"/>] The <see cref="P:UnityEditor.SerializedObject.targetObjects"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.PropertyReference.Context">
            <summary>[<see cref="T:UnityEngine.SerializeField"/>] The <see cref="P:UnityEditor.SerializedObject.context"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.PropertyReference.PropertyPath">
            <summary>[<see cref="T:UnityEngine.SerializeField"/>] The <see cref="P:UnityEditor.SerializedProperty.propertyPath"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.PropertyReference.IsInitialized">
            <summary>Indicates whether the <see cref="P:InspectorGadgets.Editor.Serialization.PropertyReference.Property"/> has been accessed.</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.PropertyReference.Property">
            <summary>[<see cref="T:UnityEngine.SerializeField"/>] The referenced <see cref="T:UnityEditor.SerializedProperty"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.#ctor(UnityEditor.SerializedProperty)">
            <summary>
            Creates a new <see cref="T:InspectorGadgets.Editor.Serialization.PropertyReference"/> which wraps the specified `property`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.op_Implicit(UnityEditor.SerializedProperty)~InspectorGadgets.Editor.Serialization.PropertyReference">
            <summary>
            Creates a new <see cref="T:InspectorGadgets.Editor.Serialization.PropertyReference"/> which wraps the specified `property`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.op_Implicit(InspectorGadgets.Editor.Serialization.PropertyReference)~UnityEditor.SerializedProperty">
            <summary>
            Returns the target <see cref="P:InspectorGadgets.Editor.Serialization.PropertyReference.Property"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.IsTarget(UnityEditor.SerializedProperty,UnityEngine.Object[])">
            <summary>Do the specified `property` and `targetObjects` match the targets of this reference?</summary>
        </member>
        <member name="P:InspectorGadgets.Editor.Serialization.PropertyReference.TargetsExist">
            <summary>Is there is at least one target and none of them are <c>null</c>?</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.Update">
            <summary>
            Calls <see cref="M:UnityEditor.SerializedObject.Update"/> if the <see cref="P:InspectorGadgets.Editor.Serialization.PropertyReference.Property"/> has been initialized.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.ApplyModifiedProperties">
            <summary>
            Calls <see cref="M:UnityEditor.SerializedObject.ApplyModifiedProperties"/> if the <see cref="P:InspectorGadgets.Editor.Serialization.PropertyReference.Property"/> has been initialized.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.Dispose">
            <summary>
            Calls <see cref="M:UnityEditor.SerializedObject.Dispose"/> if the <see cref="P:InspectorGadgets.Editor.Serialization.PropertyReference.Property"/> has been initialized.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.GetPropertyHeight">
            <summary>Gets the height needed to draw the target property.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.DoTargetGUI(UnityEngine.Rect)">
            <summary>Draws the target object within the specified `area`.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.PropertyReference.DoPropertyGUI(UnityEngine.Rect)">
            <summary>Draws the target property within the specified `area`.</summary>
        </member>
        <member name="M:InspectorGadgets.Editor.Serialization.IsValid(InspectorGadgets.Editor.Serialization.PropertyReference)">
            <summary>Returns true if the `reference` and <see cref="P:InspectorGadgets.Editor.Serialization.PropertyReference.Property"/> are not null.</summary>
        </member>
        <member name="T:InspectorGadgets.Editor.WatcherWindow">
            <summary>
            An <see cref="T:UnityEditor.EditorWindow"/> which draws various objects without needing to select them individually.
            </summary>
        </member>
        <member name="M:InspectorGadgets.Editor.WatcherWindow.Watch(UnityEditor.SerializedProperty)">
            <summary>
            Opens the <see cref="T:InspectorGadgets.Editor.WatcherWindow"/> and adds the `property` to its display list.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs">
            <summary>
            A collection of wrappers for PlayerPrefs and EditorPrefs which simplify the way you can store and retrieve values.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.IAutoPref">
            <summary>An object which encapsulates a pref value stored with a specific key.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.IAutoPref.Key">
            <summary>The key used to identify this pref.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.IAutoPref.Value">
            <summary>The current value of this pref.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.AutoPref`1">
            <summary>An object which encapsulates a pref value stored with a specific key.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.AutoPref`1.Key">
            <summary>The key used to identify this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.AutoPref`1.DefaultValue">
            <summary>The default value to use if this pref has no existing value.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.AutoPref`1.OnValueChanged">
            <summary>Called when the <see cref="P:InspectorGadgets.AutoPrefs.AutoPref`1.Value"/> is changed.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.AutoPref`1.Value">
            <summary>The current value of this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.#ctor(System.String,`0,System.Action{`0})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.Load">
            <summary>Loads the value of this pref from the system.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.Save">
            <summary>Saves the value of this pref to the system.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.op_Implicit(InspectorGadgets.AutoPrefs.AutoPref{`0})~`0">
            <summary>Returns the current value of this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.op_Equality(InspectorGadgets.AutoPrefs.AutoPref{`0},`0)">
            <summary>Checks if the value of this pref is equal to the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.op_Inequality(InspectorGadgets.AutoPrefs.AutoPref{`0},`0)">
            <summary>Checks if the value of this pref is not equal to the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.Reload">
            <summary>Reloads the value of this pref from the system.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.GetHashCode">
            <summary>Returns a hash code for the current pref value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.IsSaved">
            <summary>Returns true if the preferences currently contains a saved value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.DeletePref">
            <summary>Deletes the value of this pref from the preferences and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.RevertToDefaultValue">
            <summary>Sets the <see cref="P:InspectorGadgets.AutoPrefs.AutoPref`1.Value"/> = <see cref="F:InspectorGadgets.AutoPrefs.AutoPref`1.DefaultValue"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.ToString">
            <summary>Returns <c>Value?.ToString()</c>.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.AutoPref`1.GUIFieldMethod">
            <summary>[Editor-Only] A delegate used to draw a GUI field and return its value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle,InspectorGadgets.AutoPrefs.AutoPref{`0}.GUIFieldMethod)">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.AutoPref`1.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.GetControlRect(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>
            Uses <see cref="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])"/>
            to allocate a <see cref="T:UnityEngine.GUILayout"/> <see cref="T:UnityEngine.Rect"/> for a control.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.GetControlRect(UnityEngine.GUILayoutOption[])">
            <summary>
            Uses <see cref="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])"/>
            to allocate a <see cref="T:UnityEngine.GUILayout"/> <see cref="T:UnityEngine.Rect"/> for a control.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.GUIContent,UnityEngine.GUIStyle,InspectorGadgets.AutoPrefs.AutoPref{`0}.GUIFieldMethod,UnityEngine.GUILayoutOption[])">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.GUIContent,InspectorGadgets.AutoPrefs.AutoPref{`0}.GUIFieldMethod,UnityEngine.GUILayoutOption[])">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(System.String,UnityEngine.GUILayoutOption[])">
            <summary>[Editor-Only] Draws GUI controls for this pref and returns true if the value was changed.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.Bool">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.Boolean"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Bool.#ctor(System.String,System.Boolean,System.Action{System.Boolean})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Bool"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Bool.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Bool.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Bool.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.Bool">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.Bool"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Bool.Invert">
            <summary>Toggles the value of this pref from false to true or vice versa.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Bool.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Bool.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.Float">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.Single"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Float.#ctor(System.String,System.Single,System.Action{System.Single})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Float"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Float.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Float.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Float.op_GreaterThan(InspectorGadgets.AutoPrefs.Float,System.Single)">
            <summary>Checks if the value of this pref is greater then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Float.op_LessThan(InspectorGadgets.AutoPrefs.Float,System.Single)">
            <summary>Checks if the value of this pref is less then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Float.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.Float">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.Float"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Float.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Float.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.Int">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.Int32"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Int.#ctor(System.String,System.Int32,System.Action{System.Int32})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.Int"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Int.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Int.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Int.op_GreaterThan(InspectorGadgets.AutoPrefs.Int,System.Int32)">
            <summary>Checks if the value of this pref is greater then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Int.op_LessThan(InspectorGadgets.AutoPrefs.Int,System.Int32)">
            <summary>Checks if the value of this pref is less then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Int.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.Int">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.Int"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Int.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Int.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.String">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.String"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.String.#ctor(System.String,System.String,System.Action{System.String})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.String"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.String.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.String.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.String.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.String">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.String"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.String.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.String.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.Vector2">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:UnityEngine.Vector2"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Vector2.KeyX">
            <summary>The key used to identify the x value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Vector2.KeyY">
            <summary>The key used to identify the y value of this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector2.#ctor(System.String,UnityEngine.Vector2,System.Action{UnityEngine.Vector2})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Vector2"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector2.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector2.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector2.IsSaved">
            <summary>Returns true if <see cref="T:UnityEngine.PlayerPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector2.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector2.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.Vector2">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.Vector2"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector2.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Vector2.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.Vector3">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:UnityEngine.Vector3"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Vector3.KeyX">
            <summary>The key used to identify the x value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Vector3.KeyY">
            <summary>The key used to identify the y value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Vector3.KeyZ">
            <summary>The key used to identify the z value of this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.#ctor(System.String,UnityEngine.Vector3,System.Action{UnityEngine.Vector3})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Vector3"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.IsSaved">
            <summary>Returns true if <see cref="T:UnityEngine.PlayerPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.Vector3">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.Vector3"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.op_Implicit(InspectorGadgets.AutoPrefs.Vector3)~UnityEngine.Color">
            <summary>Returns a <see cref="T:UnityEngine.Color"/> using the (x, y, z) of the pref as (r, g, b, a = 1).</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Vector3.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.DoColorGUIField(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>[Editor-Only]
            Draws a <see cref="T:UnityEngine.Color"/> field for this pref and returns true if the value was changed.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector3.DoColorGUIField(UnityEngine.GUIContent)">
            <summary>[Editor-Only]
            Draws a <see cref="T:UnityEngine.Color"/> field for this pref and returns true if the value was changed.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.Vector4">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:UnityEngine.Vector4"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Vector4.KeyX">
            <summary>The key used to identify the x value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Vector4.KeyY">
            <summary>The key used to identify the y value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Vector4.KeyZ">
            <summary>The key used to identify the z value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Vector4.KeyW">
            <summary>The key used to identify the w value of this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.#ctor(System.String,UnityEngine.Vector4,System.Action{UnityEngine.Vector4})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Vector4"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.IsSaved">
            <summary>Returns true if <see cref="T:UnityEngine.PlayerPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.Vector4">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.Vector4"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.op_Implicit(InspectorGadgets.AutoPrefs.Vector4)~UnityEngine.Color">
            <summary>Returns a <see cref="T:UnityEngine.Color"/> using the (x, y, z, w) of the pref as (r, g, b, a).</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Vector4.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.DoColorGUIField(UnityEngine.Rect,UnityEngine.GUIContent)">
            <summary>[Editor-Only]
            Draws a <see cref="T:UnityEngine.Color"/> field for this pref and returns true if the value was changed.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Vector4.DoColorGUIField(UnityEngine.GUIContent)">
            <summary>[Editor-Only]
            Draws a <see cref="T:UnityEngine.Color"/> field for this pref and returns true if the value was changed.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.Quaternion">
            <summary>
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which <see cref="T:UnityEngine.Quaternion"/> value stored in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Quaternion.KeyX">
            <summary>The key used to identify the x value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Quaternion.KeyY">
            <summary>The key used to identify the y value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Quaternion.KeyZ">
            <summary>The key used to identify the z value of this pref.</summary>
        </member>
        <member name="F:InspectorGadgets.AutoPrefs.Quaternion.KeyW">
            <summary>The key used to identify the w value of this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Quaternion.#ctor(System.String,UnityEngine.Quaternion,System.Action{UnityEngine.Quaternion})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Quaternion"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Quaternion.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Quaternion.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEngine.PlayerPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Quaternion.IsSaved">
            <summary>Returns true if <see cref="T:UnityEngine.PlayerPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Quaternion.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEngine.PlayerPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Quaternion.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.Quaternion">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.Quaternion"/> pref using the specified string as the key.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.Quaternion.DoGUIField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>[Editor-Only] Draws a GUI field for this pref and returns the value it is set to.</summary>
        </member>
        <member name="P:InspectorGadgets.AutoPrefs.Quaternion.DefaultStyle">
            <summary>[Editor-Only]
            Draws the default GUI style used by this pref if none is specified when calling
            <see cref="M:InspectorGadgets.AutoPrefs.AutoPref`1.OnGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)"/>.
            </summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorBool">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.Boolean"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorBool.#ctor(System.String,System.Boolean,System.Action{System.Boolean})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.EditorBool"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorBool.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorBool.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorBool.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorBool.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorBool.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorBool">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorBool"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorFloat">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.Single"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.#ctor(System.String,System.Single,System.Action{System.Single})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.EditorFloat"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.op_GreaterThan(InspectorGadgets.AutoPrefs.EditorFloat,System.Single)">
            <summary>Checks if the value of this pref is greater then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.op_LessThan(InspectorGadgets.AutoPrefs.EditorFloat,System.Single)">
            <summary>Checks if the value of this pref is less then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorFloat.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorFloat">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorFloat"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorInt">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.Int32"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.#ctor(System.String,System.Int32,System.Action{System.Int32})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.EditorInt"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.op_GreaterThan(InspectorGadgets.AutoPrefs.EditorInt,System.Int32)">
            <summary>Checks if the value of this pref is greater then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.op_LessThan(InspectorGadgets.AutoPrefs.EditorInt,System.Int32)">
            <summary>Checks if the value of this pref is less then the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorInt.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorInt">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorInt"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorString">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:System.String"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorString.#ctor(System.String,System.String,System.Action{System.String})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.EditorString"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorString.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorString.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorString.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorString.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorString.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorString">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorString"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorVector2">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:UnityEngine.Vector2"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector2.#ctor(System.String,UnityEngine.Vector2,System.Action{UnityEngine.Vector2})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.EditorString"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector2.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector2.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector2.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector2.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector2.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorVector2">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorVector2"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorVector3">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:UnityEngine.Vector3"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector3.#ctor(System.String,UnityEngine.Vector3,System.Action{UnityEngine.Vector3})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.EditorVector3"/> pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector3.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector3.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector3.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector3.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector3.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorVector3">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorVector3"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorVector4">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:InspectorGadgets.AutoPrefs.Vector4"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector4.#ctor(System.String,UnityEngine.Vector4,System.Action{UnityEngine.Vector4})">
            <summary>Constructs an <see cref="T:InspectorGadgets.AutoPrefs.EditorVector4"/> pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector4.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector4.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector4.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector4.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorVector4.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorVector4">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorVector4"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.AutoPrefs.EditorQuaternion">
            <summary>[Editor-Only]
            An <see cref="T:InspectorGadgets.AutoPrefs.AutoPref`1"/> which encapsulates a <see cref="T:UnityEngine.Quaternion"/> value stored in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorQuaternion.#ctor(System.String,UnityEngine.Quaternion,System.Action{UnityEngine.Quaternion})">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Quaternion"/> pref with the specified `key` and `defaultValue`.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorQuaternion.#ctor(System.String)">
            <summary>Constructs a <see cref="T:InspectorGadgets.AutoPrefs.Quaternion"/> pref with the specified `key` and <see cref="P:UnityEngine.Quaternion.identity"/> as the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorQuaternion.Load">
            <summary>Loads the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorQuaternion.Save">
            <summary>Saves the value of this pref to <see cref="T:UnityEditor.EditorPrefs"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorQuaternion.IsSaved">
            <summary>Returns true if <see cref="T:UnityEditor.EditorPrefs"/> currently contains a value for this pref.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorQuaternion.DeletePref">
            <summary>Deletes the value of this pref from <see cref="T:UnityEditor.EditorPrefs"/> and reverts to the default value.</summary>
        </member>
        <member name="M:InspectorGadgets.AutoPrefs.EditorQuaternion.op_Implicit(System.String)~InspectorGadgets.AutoPrefs.EditorQuaternion">
            <summary>Creates a new <see cref="T:InspectorGadgets.AutoPrefs.EditorQuaternion"/> pref using the specified string as the key.</summary>
        </member>
        <member name="T:InspectorGadgets.EditorState">
            <summary>Represents a Unity Editor state which can be used as a condition.</summary>
        </member>
        <member name="F:InspectorGadgets.EditorState.Always">
            <summary>All the time, regardless of the current state of the Unity Editor.</summary>
        </member>
        <member name="F:InspectorGadgets.EditorState.Playing">
            <summary>When the Unity Editor is in Play Mode or in a Runtime Build.</summary>
        </member>
        <member name="F:InspectorGadgets.EditorState.Editing">
            <summary>When the Unity Editor is not in Play Mode.</summary>
        </member>
        <member name="T:InspectorGadgets.IGUtils">
            <summary>Various utility methods used by <see cref="N:InspectorGadgets"/>.</summary>
        </member>
        <member name="P:InspectorGadgets.IGUtils.DefaultEditorState">
            <summary>Determines when to show Inspectable attributes if not specified in their constructor.</summary>
            <remarks>This value is stored in <see cref="T:UnityEngine.PlayerPrefs"/>.</remarks>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ValueOrDefault(System.Nullable{InspectorGadgets.EditorState})">
            <summary>
            Returns the `state` as long as it isn't <c>null</c>.
            Otherwise returns the <see cref="P:InspectorGadgets.IGUtils.DefaultEditorState"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.IsNow(InspectorGadgets.EditorState)">
            <summary>Returns true if the Unity Editor is currently in the specified `state`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ConvertCamelCaseToFriendly(System.String,System.Boolean)">
            <summary>Adds spaces to `camelCase` before each uppercase letter.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ConvertCamelCaseToFriendly(System.Text.StringBuilder,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Adds spaces to `camelCase` before each uppercase letter.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ConvertFieldNameToFriendly(System.String,System.Boolean)">
            <summary>
            Adds spaces to `fieldName` before each uppercase letter and removes any underscores from the start.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.TruncateForLabel(System.String)">
            <summary>
            Truncate the given string so it can be used in a GUI.Label. MaxLength = 16,382.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.DeepToString(System.Collections.IEnumerable,System.String)">
            <summary>Returns a string containing the value of each element in `collection`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.DeepToString(System.Collections.IEnumerable)">
            <summary>Returns a string containing the value of each element in `collection` (each on a new line).</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.AppendDeepToString(System.Text.StringBuilder,System.Collections.IEnumerator,System.String)">
            <summary>Each element returned by `enumerator` is appended to `text`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.DeepToString(System.Collections.IEnumerator,System.String)">
            <summary>Returns a string containing the value of each element in `enumerator`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.DeepToString(System.Collections.IEnumerator)">
            <summary>Returns a string containing the value of each element in `enumerator` (each on a new line).</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetTransformPath(UnityEngine.Transform)">
            <summary>
            Appends the full transform path to the target with slashes between the names of each of its parents, much like a file path.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.AppendTransformPath(System.Text.StringBuilder,UnityEngine.Transform)">
            <summary>
            Appends the full transform path to the target with slashes between the names of each of its parents, much like a file path.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.Set(System.Nullable{System.Single},System.Single@)">
            <summary>
            If `source` is not null, `target` is given its value.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.Set(System.Nullable{System.Single},System.Single)">
            <summary>
            If `source` is not null, return its value, otherwise return `target`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ToDisplayString(System.Nullable{System.Single})">
            <summary>Returns the specified `value` as a string, or "-" if it is null.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ToDisplayString(System.Single)">
            <summary>Returns the specified `value` as a string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.CalculateLevenshteinDistance(System.String,System.String)">
            <summary>
            Calculate the number of removals, inserts, and replacements needed to turn `a` into `b`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetNameCS(System.Type,System.Boolean)">
            <summary>
            Returns the name of a `type` as it would appear in C# code.
            <para></para>
            For example, typeof(List&lt;float&gt;).FullName would give you:
            System.Collections.Generic.List`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]
            <para></para>
            This method would instead return System.Collections.Generic.List&lt;float&gt; if `fullName` is true, or
            just List&lt;float&gt; if it is false.
            <para></para>
            Note that all returned values are stored in a dictionary to speed up repeated use.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.AppendNameAndGenericArguments(System.Text.StringBuilder,System.Type,System.Boolean,System.Int32)">
            <summary>
            Appends the generic arguments of `type` (after skipping the specified number).
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetNameCS(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns the full name of a `member` as it would appear in C# code.
            <para></para>
            For example, passing this method info in as its own parameter would return "<see cref="T:InspectorGadgets.IGUtils"/>.GetNameCS".
            <para></para>
            Note that when `member` is a <see cref="T:System.Type"/>, this method calls <see cref="M:InspectorGadgets.IGUtils.GetNameCS(System.Type,System.Boolean)"/> instead.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.AppendNameCS(System.Text.StringBuilder,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Appends the full name of a `member` as it would appear in C# code.
            <para></para>
            For example, passing this method info in as its own parameter would append "<see cref="T:InspectorGadgets.IGUtils"/>.AppendName".
            <para></para>
            Note that when `member` is a <see cref="T:System.Type"/>, this method calls <see cref="M:InspectorGadgets.IGUtils.GetNameCS(System.Type,System.Boolean)"/> instead.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>Gets a single custom attribute of type T and casts it.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetAttributedFields``1(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Reflection.FieldInfo})">
            <summary>Get all fields with the specified attribute in `type`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetAttributedProperties``1(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>Get all properties with the specified attribute in `type`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetAttributedMethods``1(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>Get all methods with the specified attribute in `type`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.LinearRescaleTo01(System.Single,System.Single,System.Single)">
            <summary>
            Re-scales `value` from the old range (`oldMin` to `oldMax`) to the new range (0 to 1).
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.LinearRescale(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Re-scales `value` from the old range (`oldMin` to `oldMax`) to the new range (`newMin` to `newMax`).
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.CopyCurve(UnityEngine.AnimationCurve)">
            <summary>Creates a duplicate of the given `curve`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetStartEndTime(UnityEngine.AnimationCurve,System.Single@,System.Single@)">
            <summary>Gets the time of the first and last keyframes.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetStartEndTime(UnityEngine.Keyframe[],System.Single@,System.Single@)">
            <summary>Gets the time of the first and last keyframes.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetStartEndValue(UnityEngine.AnimationCurve,System.Single@,System.Single@)">
            <summary>Gets the value of the first and last keyframes.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetStartEndValue(UnityEngine.Keyframe[],System.Single@,System.Single@)">
            <summary>Gets the value of the first and last keyframes.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetStartEndValueSorted(UnityEngine.AnimationCurve,System.Single@,System.Single@)">
            <summary>Gets the higher and lower value of the first and last keyframes.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetStartEndValueSorted(UnityEngine.Keyframe[],System.Single@,System.Single@)">
            <summary>Gets the higher and lower value of the first and last keyframes.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetMinMaxKeyValue(UnityEngine.AnimationCurve,System.Single@,System.Single@)">
            <summary>
            Gets the values of the lowest and highest keyframes.
            <para></para>
            Note that these will not necessarily be the exact bounds of the curve if the tangents cause it to continue
            further than the keyframes.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetMinMaxKeyValue(UnityEngine.Keyframe[],System.Single@,System.Single@)">
            <summary>
            Gets the values of the lowest and highest keyframes.
            <para></para>
            Note that these will not necessarily be the exact bounds of the curve if the tangents cause it to continue
            further than the keyframes.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetMinMaxValueEstimate(UnityEngine.AnimationCurve,System.Single@,System.Single@,System.Int32)">
            <summary>Estimates the highest and lowest values in the `curve`.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.IsNormalized(UnityEngine.AnimationCurve)">
            <summary>Indicates whether the time and values both start at 0 and end at 1.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.IsNormalized(UnityEngine.Keyframe[])">
            <summary>Indicates whether the time and values both start at 0 and end at 1.</summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.Normalize(UnityEngine.AnimationCurve)">
            <summary>
            Rescales the curve so the time and values both start at 0 and end at 1.
            Note that this does not modify any of the tangents so the shape of the curve may change.
            Returns the input curve so calls can be chained.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.Normalize(UnityEngine.Keyframe[])">
            <summary>
            Rescales the curve so the time and values both start at 0 and end at 1.
            Returns the input array so calls can be chained.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.SmoothTangents(UnityEngine.AnimationCurve)">
            <summary>
            Smooths the tangents of all keyframes.
            Returns the input curve so calls can be chained.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.FlipHorizontal(UnityEngine.AnimationCurve)">
            <summary>
            Reverses the curve so that it runs backwards over the same time range.
            Returns the input curve so calls can be chained.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.FlipVertical(UnityEngine.AnimationCurve)">
            <summary>
            Reverses the curve so that its values are upside down within range.
            Returns the input curve so calls can be chained.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ExtendMirrorred(UnityEngine.AnimationCurve)">
            <summary>
            Duplicates the curve past the end and mirrors the duplicated section.
            Returns the input curve so calls can be chained.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.EnforceHorizontalSymmetry(UnityEngine.AnimationCurve)">
            <summary>
            Ensures that the curve is horizontally symmetrical in relation to its existing start and end points.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.FlipWeightedMode(UnityEngine.WeightedMode)">
            <summary>
            <see cref="F:UnityEngine.WeightedMode.Out"/> becomes <see cref="F:UnityEngine.WeightedMode.In"/> and vice versa.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetDescription(UnityEngine.AnimationCurve)">
            <summary>
            Returns a string describing the start and end time and value of the `curve`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ForEachTypeInDependantAssemblies(System.Reflection.Assembly,System.Action{System.Type})">
            <summary>
            Calls the specified `method` once for each type in each loaded assembly that references the specified `assembly`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ForEachType(System.Reflection.Assembly,System.Action{System.Type})">
            <summary>
            Calls the specified `method` once for each type in the specified `assembly`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetDerivedTypes(System.Type,System.Boolean)">
            <summary>
            Gets all non-abstract types in the currently loaded assemblies which derive from the specified base type
            (including the base type itself if it is not abstract).
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetDerivedTypes(System.Type,System.Collections.Generic.ICollection{System.Type},System.Boolean)">
            <summary>
            Gets all non-abstract types in the currently loaded assemblies which derive from the specified base type
            (including the base type itself if it is not abstract).
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.FindType(System.String,System.Boolean)">
            <summary>
            Calls <see cref="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)"/> on each currently loaded assembly until it finds a
            match then returns it.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.ProgressiveSearch(UnityEngine.GameObject,System.Type,System.String)">
            <summary>
            Tries various search methods in the following order until it finds something:
            <see cref="M:UnityEngine.GameObject.GetComponent(System.Type)"/>, 
            <see cref="M:UnityEngine.GameObject.GetComponentsInParent(System.Type,System.Boolean)"/>,
            <see cref="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type,System.Boolean)"/>,
            <see cref="M:UnityEngine.Resources.FindObjectsOfTypeAll(System.Type)"/>.
            <para></para>
            In the first group where a component of the correct type is found, if multiple components were found the
            one with a name closest to the `nameHint` is chosen.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetComponentInHierarchy(UnityEngine.GameObject,System.Type,System.String)">
            <summary>
            Finds a component of the specified `componentType` on the `gameObject` or any of its parents or children.
            If multiple components are found the one with a name closest to the `nameHint` is chosen.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetBestMatch``1(``0[],System.String,System.Int32@)">
            <summary>
            Compares the name of each of the `objects` and returns the one that is closest to the `nameHint`.
            <para></para>
            See also: <see cref="M:InspectorGadgets.IGUtils.CalculateLevenshteinDistance(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetBestMatch``1(``0[],System.String)">
            <summary>
            Compares the name of each of the `objects` and returns the one that is closest to the `nameHint`.
            <para></para>
            See also: <see cref="M:InspectorGadgets.IGUtils.CalculateLevenshteinDistance(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.StableInsertionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts `list`, maintaining the order of any elements with an identical comparison
            (unlike the standard <see cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/> method).
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.StableInsertionSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts `list`, maintaining the order of any elements with an identical comparison
            (unlike the standard <see cref="M:System.Collections.Generic.List`1.Sort"/> method).
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            If the specified `key` is present in the `dictionary`, its value is returned.
            Otherwise a new value is added to the `dictionary` and returned.
            </summary>
        </member>
        <member name="M:InspectorGadgets.IGUtils.LogProOnlyMessage(System.String)">
            <summary>
            Logs "Inspector Gadgets Lite " + message + "\nYou can purchase ...".
            </summary>
        </member>
        <member name="T:InspectorGadgets.NullableVector4">
            <summary>A <see cref="T:UnityEngine.Vector4"/> which uses nullable floats.</summary>
        </member>
        <member name="F:InspectorGadgets.NullableVector4.x">
            <summary>The X component of this vector.</summary>
        </member>
        <member name="F:InspectorGadgets.NullableVector4.y">
            <summary>The Y component of this vector.</summary>
        </member>
        <member name="F:InspectorGadgets.NullableVector4.z">
            <summary>The Z component of this vector.</summary>
        </member>
        <member name="F:InspectorGadgets.NullableVector4.w">
            <summary>The W component of this vector.</summary>
        </member>
        <member name="P:InspectorGadgets.NullableVector4.Item(System.Int32)">
            <summary>The component of this vector at the specified index: 0 = x, 1 = y, 2 = z, 3 = w.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.AnyNull">
            <summary>Returns true if any of the components of this vector are null.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.AnyNull(System.Int32)">
            <summary>Returns true if any of the components of this vector are null, ignoring components after `componentCount`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.AllNull">
            <summary>Returns true if all of the components of this vector are null.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.AllNull(System.Int32)">
            <summary>Returns true if all of the components of this vector are null, ignoring components after `componentCount`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.#ctor">
            <summary>Creates a new <see cref="T:InspectorGadgets.NullableVector4"/> with all components null.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Creates a new <see cref="T:InspectorGadgets.NullableVector4"/> with the specified components.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.#ctor(UnityEngine.Vector2)">
            <summary>Creates a new <see cref="T:InspectorGadgets.NullableVector4"/> with each of its components set the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.#ctor(UnityEngine.Vector3)">
            <summary>Creates a new <see cref="T:InspectorGadgets.NullableVector4"/> with each of its components set the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.#ctor(UnityEngine.Vector4)">
            <summary>Creates a new <see cref="T:InspectorGadgets.NullableVector4"/> with each of its components set the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.#ctor(InspectorGadgets.NullableVector4)">
            <summary>Creates a new <see cref="T:InspectorGadgets.NullableVector4"/> with each of its components set the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.#ctor(System.Nullable{System.Single}[])">
            <summary>Creates a new <see cref="T:InspectorGadgets.NullableVector4"/> using the first 4 elements of the specified array as its components.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.SetAllNull">
            <summary>Sets all components of this vector to null.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ZeroAllNulls">
            <summary>Sets all components of this vector which are null to 0.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.CopyFrom(InspectorGadgets.NullableVector4)">
            <summary>Sets each of the components of this vector to be the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.CopyFrom(UnityEngine.Vector2)">
            <summary>Sets each of the components of this vector to be the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.CopyFrom(UnityEngine.Vector3)">
            <summary>Sets each of the components of this vector to be the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.CopyFrom(UnityEngine.Vector4)">
            <summary>Sets each of the components of this vector to be the same as the specified `value`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToVector2">
            <summary>
            Returns a new <see cref="T:UnityEngine.Vector2"/> using components of this vector.
            Any components which are null will be set to 0.
            </summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToVector3">
            <summary>
            Returns a new <see cref="T:UnityEngine.Vector3"/> using components of this vector.
            Any components which are null will be set to 0.
            </summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToVector4">
            <summary>
            Returns a new <see cref="T:UnityEngine.Vector3"/> using components of this vector.
            Any components which are null will be set to 0.
            </summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToVector3(UnityEngine.Vector2)">
            <summary>
            Returns a new <see cref="T:UnityEngine.Vector3"/> using components of this vector.
            Any components which are null will instead use the corresponding component of the specified `fallback`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToVector3(UnityEngine.Vector3)">
            <summary>
            Returns a new <see cref="T:UnityEngine.Vector3"/> using components of this vector.
            Any components which are null will instead use the corresponding component of the specified `fallback`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToVector4(UnityEngine.Vector4)">
            <summary>
            Returns a new <see cref="T:UnityEngine.Vector4"/> using components of this vector.
            Any components which are null will instead use the corresponding component of the specified `fallback`.
            </summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToString(System.Int32)">
            <summary>Returns a nicely formatted string for this vector using '-' to denote nulls.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.ToString">
            <summary>Returns a nicely formatted string for this vector using '-' to denote nulls.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.TryParse(System.String,System.Int32,InspectorGadgets.NullableVector4@)">
            <summary>
            Attempts to parse a series of floats from the given string and returns the index of the last successfully parsed value.
            </summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.op_Equality(InspectorGadgets.NullableVector4,InspectorGadgets.NullableVector4)">
            <summary>Returns true if all of the components of `a` and `b` are equal.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.op_Inequality(InspectorGadgets.NullableVector4,InspectorGadgets.NullableVector4)">
            <summary>Returns true if any of the components of `a` and `b` are not equal.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.Equals(InspectorGadgets.NullableVector4,System.Int32)">
            <summary>Returns true if all of the components of `this` and `other` are equal, ignoring components after `componentCount`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.Equals(System.Object)">
            <summary>Returns true if all of the components of `a` and `b` are equal.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.GetHashCode">
            <summary>Uses the base method.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.op_Implicit(UnityEngine.Vector2)~InspectorGadgets.NullableVector4">
            <summary>Returns a new <see cref="T:InspectorGadgets.NullableVector4"/> with each of its components set the same as the specified `vector`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.op_Implicit(UnityEngine.Vector3)~InspectorGadgets.NullableVector4">
            <summary>Returns a new <see cref="T:InspectorGadgets.NullableVector4"/> with each of its components set the same as the specified `vector`.</summary>
        </member>
        <member name="M:InspectorGadgets.NullableVector4.op_Implicit(UnityEngine.Vector4)~InspectorGadgets.NullableVector4">
            <summary>Returns a new <see cref="T:InspectorGadgets.NullableVector4"/> with each of its components set the same as the specified `vector`.</summary>
        </member>
        <member name="T:InspectorGadgets.StaticLazyStack`1">
            <summary>
            A static stack that creates new elements as needed but keeps and reuses them instead of actually adding and
            removing like a regular stack.
            </summary>
        </member>
        <member name="F:InspectorGadgets.StaticLazyStack`1.Stack">
            <summary>
            The elements managed by this class.
            <para></para>
            Note that the number of active elements is stored in <see cref="P:InspectorGadgets.StaticLazyStack`1.StackHeight"/> rather than the count of
            this list.
            </summary>
            <remarks>
            Not an actual Stack because that class is in System.dll which is not otherwise needed.
            </remarks>
        </member>
        <member name="P:InspectorGadgets.StaticLazyStack`1.StackHeight">
            <summary>
            The number of elements currently active in the stack.
            </summary>
        </member>
        <member name="P:InspectorGadgets.StaticLazyStack`1.MaxHeight">
            <summary>
            The maximum number of elements that can be in the stack at a time. Default = 10.
            </summary>
        </member>
        <member name="M:InspectorGadgets.StaticLazyStack`1.Increment">
            <summary>
            Increases the <see cref="P:InspectorGadgets.StaticLazyStack`1.StackHeight"/> by 1, ensures that an element exists at the last index and returns it.
            </summary>
        </member>
        <member name="M:InspectorGadgets.StaticLazyStack`1.OnIncrement">
            <summary>Called by <see cref="M:InspectorGadgets.StaticLazyStack`1.Increment"/>.</summary>
        </member>
        <member name="M:InspectorGadgets.StaticLazyStack`1.Decrement">
            <summary>Decreases the <see cref="P:InspectorGadgets.StaticLazyStack`1.StackHeight"/> by 1.</summary>
        </member>
        <member name="M:InspectorGadgets.StaticLazyStack`1.GetCurrent">
            <summary>Gets the element currently at the top of the stack.</summary>
        </member>
        <member name="T:InspectorGadgets.DisposableStaticLazyStack`1">
            <summary>
            A <see cref="T:InspectorGadgets.StaticLazyStack`1"/> which implements <see cref="M:System.IDisposable.Dispose"/> to automatically call
            <see cref="M:InspectorGadgets.StaticLazyStack`1.Decrement"/>
            </summary>
        </member>
        <member name="M:InspectorGadgets.DisposableStaticLazyStack`1.Dispose">
            <summary>
            Calls <see cref="M:InspectorGadgets.StaticLazyStack`1.Decrement"/> and can be overridden.
            </summary>
        </member>
        <member name="T:InspectorGadgets.SimpleStaticLazyStack`2">
            <summary>
            A <see cref="T:InspectorGadgets.DisposableStaticLazyStack`1"/> that gets and stores a particular <typeparamref name="TValue"/>,
            sets it to a different value, and then reverts it to the previous value when disposed.
            </summary>
        </member>
        <member name="P:InspectorGadgets.SimpleStaticLazyStack`2.PreviousValue">
            <summary>The <see cref="P:InspectorGadgets.SimpleStaticLazyStack`2.CurrentValue"/> from before this stack element was activated.</summary>
        </member>
        <member name="P:InspectorGadgets.SimpleStaticLazyStack`2.CurrentValue">
            <summary>The <typeparamref name="TValue"/> being controlled by this stack.</summary>
        </member>
        <member name="M:InspectorGadgets.SimpleStaticLazyStack`2.OnIncrement">
            <summary>
            Called by <see cref="M:InspectorGadgets.StaticLazyStack`1.Increment"/>.
            Stores the <see cref="P:InspectorGadgets.SimpleStaticLazyStack`2.CurrentValue"/> in <see cref="P:InspectorGadgets.SimpleStaticLazyStack`2.PreviousValue"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.SimpleStaticLazyStack`2.Dispose">
            <summary>
            Calls <see cref="M:InspectorGadgets.StaticLazyStack`1.Decrement"/> and reverts the <see cref="P:InspectorGadgets.SimpleStaticLazyStack`2.CurrentValue"/> to the
            <see cref="P:InspectorGadgets.SimpleStaticLazyStack`2.PreviousValue"/>.
            </summary>
        </member>
        <member name="M:InspectorGadgets.SimpleStaticLazyStack`2.Get(`1)">
            <summary>
            Increments the stack, sets the <see cref="P:InspectorGadgets.SimpleStaticLazyStack`2.CurrentValue"/>, and returns the top element of the stack.
            </summary>
        </member>
        <member name="T:InspectorGadgets.Strings">
            <summary>String constants used throughout <see cref="N:InspectorGadgets"/>.</summary>
        </member>
        <member name="F:InspectorGadgets.Strings.DocumentationURL">
            <summary>The URL of the website where the Inspector Gadgets documentation is hosted.</summary>
        </member>
        <member name="F:InspectorGadgets.Strings.APIDocumentationURL">
            <summary>The URL of the website where the Inspector Gadgets API documentation is hosted.</summary>
        </member>
        <member name="F:InspectorGadgets.Strings.InspectorGadgetsVersion">
            <summary>This is Inspector Gadgets v6.9.</summary>
        </member>
        <member name="F:InspectorGadgets.Strings.NoRename">
            <summary>[Lite-Only] Disables member renaming in an [<see cref="T:System.Reflection.ObfuscationAttribute"/>].</summary>
            <example><code>
            [Obfuscation(Exclude = false, Feature = Strings.NoRename, ApplyToMembers = false)]
            internal class SomethingThatShouldNotBeRenamed { }
            </code></example>
        </member>
        <member name="F:InspectorGadgets.Strings.NegateShortcut">
            <summary>
            Menu items where the last word begins with an underscore or certain other characters are interpreted as
            having a keyboard shortcut. So we use the '\b' (backspace) character to prevent it from doing that.
            </summary>
        </member>
    </members>
</doc>
